#!/bin/bash
# postinst script for solv

set -e

# Variables
USERNAME="solv"

echo "Username: ${USERNAME}"

# Directories and Paths
MOUNT_ROOT="/mt"
RAMDRIVE_PATH="/mnt/ramdrive"
SOLV_ROOT="${MOUNT_ROOT}/solana"
WD="${SOLV_ROOT}/solana-validator"
LOG_DIR="${WD}/log"
LEDGER_DIR="${MOUNT_ROOT}/ledger/validator-ledger"
ACCOUNT_DIR="${MOUNT_ROOT}/solana-accounts"
START_VALIDATOR_SCRIPT="${WD}/start-validator.sh"

if [ -z "$SOLV_ROOT" ]; then
    handle_error "SOLV_ROOT is not defined"
fi

# Solana Wallet Keyfile Paths
MAINNET_VALIDATOR_KEYFILE="${SOLV_ROOT}/mainnet-validator-keypair.json"
TESTNET_VALIDATOR_KEYFILE="${SOLV_ROOT}/testnet-validator-keypair.json"
VOTE_ACCOUNT_KEYFILE="${SOLV_ROOT}/vote-account-keypair.json"
AUTHORITY_KEYFILE="${SOLV_ROOT}/authority-keypair.json"

# Nodenv configurations
NODENV_DIR="/home/$USERNAME/.nodenv"
NODENV_REPO="https://github.com/nodenv/nodenv.git"
NODE_VERSION="18.17.1"

handle_error() {
    echo "Error occurred: $1"
    exit 1
}

setup_firewall() {
    echo "Configuring firewall"
    yes | ufw enable
    ufw allow ssh
    ufw allow 53 
    ufw allow 8000:10000/udp
    ufw allow 8000:10000/tcp
    ufw reload
}

install_nodenv() {
    echo "Installing nodenv for $USERNAME user"
    sudo -u $USERNAME git clone $NODENV_REPO $NODENV_DIR
    ln -vs $NODENV_DIR/bin/nodenv /usr/local/bin/nodenv;
    sudo -u $USERNAME mkdir -p $NODENV_DIR/plugins;
    sudo -u $USERNAME git clone https://github.com/nodenv/node-build.git $NODENV_DIR/plugins/node-build
    sudo -u $USERNAME git clone https://github.com/nodenv/nodenv-aliases.git $NODENV_DIR/plugins/nodenv-aliases;
    chown $USERNAME:$USERNAME $NODENV_DIR/bin/nodenv;
    sudo -u $USERNAME nodenv install $NODE_VERSION;
    sudo -u $USERNAME nodenv global $NODE_VERSION;
    echo "eval \"\$(nodenv init - bash)\"" >> /home/$USERNAME/.profile || handle_error "Failed to add nodenv init to profile";
}

setup_solana_dirs(){
    echo "Making solana directory"
    mkdir -p $LOG_DIR
    mkdir -p $ACCOUNT_DIR
    mkdir -p $LEDGER_DIR
    mkdir -p $RAMDRIVE_PATH
    chown $USERNAME:$USERNAME $MOUNT_ROOT
    chown $USERNAME:$USERNAME $SOLV_ROOT
    chown $USERNAME:$USERNAME $ACCOUNT_DIR
    chown $USERNAME:$USERNAME $SOLANA_LEDGER_DIR
    chown $USERNAME:$USERNAME $RAMDRIVE_PATH
    chown $USERNAME:$USERNAME $LOG_DIR
    chown $USERNAME:$USERNAME $LEDGER_DIR
    chown $USERNAME:$USERNAME $WD
    chmod 755 $MOUNT_ROOT
    chmod 755 $SOLV_ROOT
    chmod 755 $ACCOUNT_DIR
    chmod 755 $SOLANA_LEDGER_DIR
    chmod 755 $RAMDRIVE_PATH
    chmod 777 $LOG_DIR
    chmod 755 $LEDGER_DIR
    chmod 755 $WD
}

setup_sol_service() {
    echo "Creating sol.service systemd service file"
    cat <<EOL | sudo tee /etc/systemd/system/sol.service
[Unit]
Description=Solana Validator
After=network.target
StartLimitIntervalSec=0

[Service]
Type=simple
Restart=always
RestartSec=1
LimitNOFILE=1000000
LogRateLimitIntervalSec=0
User=$USERNAME
Environment=PATH=/home/$USERNAME/.local/share/solana/install/active_release/bin
WorkingDirectory=$WD
Environment="SOLANA_METRICS_CONFIG=host=https://metrics.solana.com:8086,db=tds,u=testnet_write,p=c4fa841aa918bf8274e3e2a44d77568d9861b3ea"
ExecStart=$START_VALIDATOR_SCRIPT

[Install]
WantedBy=multi-user.target
EOL
}

setup_logrotate() {
    echo "Creating logrotate configuration for solana"
    cat <<EOL | sudo tee /etc/logrotate.d/solana
$LOG_DIR/solana-validator.log {
  su $USERNAME $USERNAME
  daily
  rotate 3
  missingok
  postrotate
    systemctl kill -s USR1 sol.service
  endscript
}
EOL
}

create_startup_script(){
    echo "Creating start-validator.sh script"
    cat <<EOL | sudo tee $START_VALIDATOR_SCRIPT
#!/bin/bash
exec solana-validator \\
--identity $TESTNET_VALIDATOR_KEYFILE \\
--vote-account $VALIDATOR_VOTE_KEYFILE \\
--log $LOG_PATH \\
--accounts $ACCOUNT_DIR \\
--ledger $LEDGER_PATH \\
--no-genesis-fetch \\
--entrypoint entrypoint.testnet.solana.com:8001 \\
--entrypoint entrypoint2.testnet.solana.com:8001 \\
--entrypoint entrypoint3.testnet.solana.com:8001 \\
--entrypoint entrypoint.testnet.solana.sergo.dev:8001 \\
--known-validator eoKpUABi59aT4rR9HGS3LcMecfut9x7zJyodWWP43YQ \\
--known-validator GAPNvBD6MXboQmxP9XTCC4CMsT5gUpdFZWbnj4Tz2s7i \\
--known-validator 5D1fNXzvv5NjV1ysLjirC4WY92RNsVH18vjmcszZd8on \\
--known-validator BFquPCAYdjN9QyLVfuGrQdJTF9Ct7Z85FDxhFeLcpFqR \\
--known-validator 9e2RvEzemWs6ZkEhdW2NddSWiFKgJfkw5LWGtgwvPnvw \\
--only-known-rpc \\
--expected-genesis-hash 4uhcVJyU9pJkvQyS88uRDiswHXSCkY3zQawwpjk2NsNY \\
--dynamic-port-range 8000-8020 \\
--rpc-port 8899 \\
--wal-recovery-mode skip_any_corrupted_record \\
--wait-for-supermajority 213932256 \\
--expected-shred-version 61807 \\
--expected-bank-hash 4cyHLxMPCJH4pq9v6eVDFBKKNwrVw8ww78yYUSJNDvjU \\
--known-validator 5D1fNXzvv5NjV1ysLjirC4WY92RNsVH18vjmcszZd8on \\
--limit-ledger-size \\
--no-incremental-snapshots
EOL
    sudo chmod +x $START_VALIDATOR_SCRIPT
    sudo chown $USERNAME:$USERNAME $START_VALIDATOR_SCRIPT
}


setup_systemd(){
    echo "Creating solana-validator.conf sysctl configuration file"
    sudo bash -c "cat >/etc/sysctl.d/21-solana-validator.conf <<EOF
# Increase UDP buffer sizes
net.core.rmem_default = 134217728
net.core.rmem_max = 134217728
net.core.wmem_default = 134217728
net.core.wmem_max = 134217728

# Increase memory mapped files limit
vm.max_map_count = 1000000

# Increase number of allowed open file descriptors
fs.nr_open = 1000000
EOF"

    sudo sysctl -p /etc/sysctl.d/21-solana-validator.conf
    echo "DefaultLimitNOFILE=1000000" | sudo tee -a /etc/systemd/system.conf

    sudo bash -c "cat >/etc/security/limits.d/90-solana-nofiles.conf <<EOF
# Increase process file descriptor count limit
* - nofile 1000000
EOF"
}

case "$1" in
    configure)
        setup_firewall

        if [ ! -d "$NODENV_DIR" ]; then
            install_nodenv
        fi

        if [ ! -d "$SOLV_ROOT" ]; then
            setup_solana_dirs
        fi
        setup_sol_service
        setup_logrotate
        create_startup_script
        setup_systemd
    ;;

    abort-upgrade|abort-remove|abort-deconfigure)
    ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac


echo "Success! You can now user Solv CLI ðŸŽ‰"
sudo -u $USERNAME bash -c 'source ~/.profile && solv log solv'

exit 0
