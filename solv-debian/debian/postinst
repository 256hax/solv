#!/bin/sh
# postinst script for solv

set -e

# Variables
USERNAME="solv"
NODENV_DIR="/home/$USERNAME/.nodenv"
NODENV_REPO="https://github.com/nodenv/nodenv.git"
SOLANA_DIR="/mt/solana"
SOLANA_LEDGER_DIR="/mt/ledger"
SOLANA_VALIDATOR_DIR="$SOLANA_DIR/solana-validator"
LOG_DIR="$SOLANA_VALIDATOR_DIR/log"
START_VALIDATOR_SCRIPT="$SOLANA_VALIDATOR_DIR/start-validator.sh"

handle_error() {
    echo "Error occurred: $1"
    exit 1
}

case "$1" in
    configure)
    ;;

    abort-upgrade|abort-remove|abort-deconfigure)
    ;;

    *)
        echo "postinst called with unknown argument \`$1'" >&2
        exit 1
    ;;
esac

# Check if nodenv is already installed for solv user
if [ ! -d "$NODENV_DIR" ]; then
    echo "Installing nodenv for $USERNAME user"
    sudo -u $USERNAME git clone $NODENV_REPO $NODENV_DIR
    ln -vs $NODENV_DIR/bin/nodenv /usr/local/bin/nodenv;
    echo "allow firewall ports";
    yes | ufw enable
    ufw allow ssh
    ufw allow 53 
    ufw allow 8000:10000/udp
    ufw allow 8000:10000/tcp
    ufw reload

    sudo -u $USERNAME mkdir -p $NODENV_DIR/plugins;
    sudo -u $USERNAME git clone https://github.com/nodenv/node-build.git $NODENV_DIR/plugins/node-build
    sudo -u $USERNAME git clone https://github.com/nodenv/nodenv-aliases.git $NODENV_DIR/plugins/nodenv-aliases;
    chown $USERNAME:$USERNAME $NODENV_DIR/bin/nodenv;
    sudo -u $USERNAME nodenv install 18.17.1 || handle_error "Failed to install node version 18.17.1";
    sudo -u $USERNAME nodenv global 18.17.1 || handle_error "Failed to set global node version to 18.17.1";
    echo "eval \"\$(nodenv init - bash)\"" >> /home/$USERNAME/.bashrc || handle_error "Failed to add nodenv init to bashrc";
fi

if [ ! -d "$SOLANA_DIR" ]; then
    echo "Making solana directory"
    mkdir -p $LOG_DIR
    mkdir -p $SOLANA_DIR-accounts
    mkdir -p $SOLANA_LEDGER_DIR/validator-ledger
    mkdir -p /mnt/ramdrive
    chown $USERNAME:$USERNAME /mt
    chown $USERNAME:$USERNAME $SOLANA_DIR
    chown $USERNAME:$USERNAME $SOLANA_DIR-accounts
    chown $USERNAME:$USERNAME $SOLANA_LEDGER_DIR
    chown $USERNAME:$USERNAME /mnt/ramdrive
    chown $USERNAME:$USERNAME $LOG_DIR
    chown $USERNAME:$USERNAME $SOLANA_LEDGER_DIR/validator-ledger
    chown $USERNAME:$USERNAME $SOLANA_VALIDATOR_DIR
    chmod 755 /mt
    chmod 755 $SOLANA_DIR
    chmod 755 $SOLANA_DIR-accounts
    chmod 755 $SOLANA_LEDGER_DIR
    chmod 755 /mnt/ramdrive
    chmod 777 $LOG_DIR
    chmod 755 $SOLANA_LEDGER_DIR/validator-ledger
    chmod 755 $SOLANA_VALIDATOR_DIR
fi

# Create sol.service systemd service file
echo "Creating sol.service systemd service file"
cat <<EOL | sudo tee /etc/systemd/system/sol.service
[Unit]
Description=Solana Validator
After=network.target
StartLimitIntervalSec=0

[Service]
Type=simple
Restart=always
RestartSec=1
LimitNOFILE=1000000
LogRateLimitIntervalSec=0
User=$USERNAME
Environment=PATH=/home/$USERNAME/.local/share/solana/install/active_release/bin
WorkingDirectory=$SOLANA_VALIDATOR_DIR
Environment="SOLANA_METRICS_CONFIG=host=https://metrics.solana.com:8086,db=tds,u=testnet_write,p=c4fa841aa918bf8274e3e2a44d77568d9861b3ea"
ExecStart=$START_VALIDATOR_SCRIPT

[Install]
WantedBy=multi-user.target
EOL

# Create logrotate configuration for solana
echo "Creating logrotate configuration for solana"
cat <<EOL | sudo tee /etc/logrotate.d/solana
$LOG_DIR/solana-validator.log {
  su $USERNAME $USERNAME
  daily
  rotate 3
  missingok
  postrotate
  systemctl kill -s USR1 sol.service
  endscript
}
EOL

# Create start-validator.sh script
echo "Creating start-validator.sh script"
cat <<EOL | sudo tee $START_VALIDATOR_SCRIPT
#!/bin/bash
exec solana-validator \
--identity $SOLANA_DIR/testnet-validator-keypair.json \
--vote-account $SOLANA_DIR/vote-account-keypair.json \
--log $LOG_DIR/solana-validator.log \
--accounts $SOLANA_DIR-accounts \
--ledger $SOLANA_DIR/ledger/validator-ledger \
--no-genesis-fetch \
--entrypoint entrypoint.testnet.solana.com:8001 \
--entrypoint entrypoint2.testnet.solana.com:8001 \
--entrypoint entrypoint3.testnet.solana.com:8001 \
--entrypoint entrypoint.testnet.solana.sergo.dev:8001 \
--known-validator eoKpUABi59aT4rR9HGS3LcMecfut9x7zJyodWWP43YQ \
--known-validator GAPNvBD6MXboQmxP9XTCC4CMsT5gUpdFZWbnj4Tz2s7i \
--known-validator 5D1fNXzvv5NjV1ysLjirC4WY92RNsVH18vjmcszZd8on \
--known-validator BFquPCAYdjN9QyLVfuGrQdJTF9Ct7Z85FDxhFeLcpFqR \
--known-validator 9e2RvEzemWs6ZkEhdW2NddSWiFKgJfkw5LWGtgwvPnvw \
--only-known-rpc \
--expected-genesis-hash 4uhcVJyU9pJkvQyS88uRDiswHXSCkY3zQawwpjk2NsNY \
--dynamic-port-range 8000-8020 \
--rpc-port 8899 \
--wal-recovery-mode skip_any_corrupted_record \
--wait-for-supermajority 213932256 \
--expected-shred-version 61807 \
--expected-bank-hash 4cyHLxMPCJH4pq9v6eVDFBKKNwrVw8ww78yYUSJNDvjU \
--known-validator 5D1fNXzvv5NjV1ysLjirC4WY92RNsVH18vjmcszZd8on \
--limit-ledger-size \
--no-incremental-snapshots
EOL

# Make the script executable
sudo chmod +x $START_VALIDATOR_SCRIPT
sudo chown $USERNAME:$USERNAME $START_VALIDATOR_SCRIPT

sudo systemctl daemon-reload
sudo systemctl restart logrotate

echo "Success! You can now run solv!"
bash -l

exit 0
